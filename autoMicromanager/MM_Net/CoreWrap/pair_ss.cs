/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace CWrapper {

using System;
using System.Runtime.InteropServices;

public class pair_ss : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal pair_ss(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(pair_ss obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~pair_ss() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MMCoreCSPINVOKE.delete_pair_ss(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public pair_ss() : this(MMCoreCSPINVOKE.new_pair_ss__SWIG_0(), true) {
  }

  public pair_ss(string t, string u) : this(MMCoreCSPINVOKE.new_pair_ss__SWIG_1(t, u), true) {
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public pair_ss(pair_ss p) : this(MMCoreCSPINVOKE.new_pair_ss__SWIG_2(pair_ss.getCPtr(p)), true) {
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public string first {
    set {
      MMCoreCSPINVOKE.pair_ss_first_set(swigCPtr, value);
      if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = MMCoreCSPINVOKE.pair_ss_first_get(swigCPtr);
      if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string second {
    set {
      MMCoreCSPINVOKE.pair_ss_second_set(swigCPtr, value);
      if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = MMCoreCSPINVOKE.pair_ss_second_get(swigCPtr);
      if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
