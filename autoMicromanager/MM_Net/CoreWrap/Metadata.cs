/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace CWrapper {

using System;
using System.Runtime.InteropServices;

public class Metadata : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Metadata(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Metadata obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Metadata() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MMCoreCSPINVOKE.delete_Metadata(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Metadata() : this(MMCoreCSPINVOKE.new_Metadata(), true) {
  }

  public void Clear() {
    MMCoreCSPINVOKE.Metadata_Clear(swigCPtr);
  }

  public StrVector GetKeys() {
    StrVector ret = new StrVector(MMCoreCSPINVOKE.Metadata_GetKeys(swigCPtr), true);
    return ret;
  }

  public MetadataSingleTag GetSingleTag(string key) {
    MetadataSingleTag ret = new MetadataSingleTag(MMCoreCSPINVOKE.Metadata_GetSingleTag(swigCPtr, key), true);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MetadataArrayTag GetArrayTag(string key) {
    MetadataArrayTag ret = new MetadataArrayTag(MMCoreCSPINVOKE.Metadata_GetArrayTag(swigCPtr, key), true);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTag(MetadataTag tag) {
    MMCoreCSPINVOKE.Metadata_SetTag(swigCPtr, MetadataTag.getCPtr(tag));
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public Metadata eql(Metadata rhs) {
    Metadata ret = new Metadata(MMCoreCSPINVOKE.Metadata_eql(swigCPtr, Metadata.getCPtr(rhs)), false);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string Serialize() {
    string ret = MMCoreCSPINVOKE.Metadata_Serialize(swigCPtr);
    return ret;
  }

  public bool Restore(string stream) {
    bool ret = MMCoreCSPINVOKE.Metadata_Restore(swigCPtr, stream);
    return ret;
  }

  public string Dump() {
    string ret = MMCoreCSPINVOKE.Metadata_Dump(swigCPtr);
    return ret;
  }

}

}
