/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace CWrapper {

using System;
using System.Runtime.InteropServices;

public class CMMCore : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CMMCore(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CMMCore obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CMMCore() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MMCoreCSPINVOKE.delete_CMMCore(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public CMMCore() : this(MMCoreCSPINVOKE.new_CMMCore(), true) {
  }

  public void SetPluginFolder(string PluginFolder) {
    MMCoreCSPINVOKE.CMMCore_SetPluginFolder(swigCPtr, PluginFolder);
  }

  public void loadDevice(string label, string library, string name) {
    MMCoreCSPINVOKE.CMMCore_loadDevice(swigCPtr, label, library, name);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void unloadAllDevices() {
    MMCoreCSPINVOKE.CMMCore_unloadAllDevices(swigCPtr);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void initializeAllDevices() {
    MMCoreCSPINVOKE.CMMCore_initializeAllDevices(swigCPtr);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void initializeDevice(string label) {
    MMCoreCSPINVOKE.CMMCore_initializeDevice(swigCPtr, label);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    MMCoreCSPINVOKE.CMMCore_reset(swigCPtr);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearLog() {
    MMCoreCSPINVOKE.CMMCore_clearLog(swigCPtr);
  }

  public void initializeLogging() {
    MMCoreCSPINVOKE.CMMCore_initializeLogging(swigCPtr);
  }

  public void shutdownLogging() {
    MMCoreCSPINVOKE.CMMCore_shutdownLogging(swigCPtr);
  }

  public void enableDebugLog(bool enable) {
    MMCoreCSPINVOKE.CMMCore_enableDebugLog(swigCPtr, enable);
  }

  public void enableStderrLog(bool enable) {
    MMCoreCSPINVOKE.CMMCore_enableStderrLog(swigCPtr, enable);
  }

  public string getUserId() {
    string ret = MMCoreCSPINVOKE.CMMCore_getUserId(swigCPtr);
    return ret;
  }

  public string getHostName() {
    string ret = MMCoreCSPINVOKE.CMMCore_getHostName(swigCPtr);
    return ret;
  }

  public void logMessage(string msg) {
    MMCoreCSPINVOKE.CMMCore_logMessage(swigCPtr, msg);
  }

  public string getVersionInfo() {
    string ret = MMCoreCSPINVOKE.CMMCore_getVersionInfo(swigCPtr);
    return ret;
  }

  public string getAPIVersionInfo() {
    string ret = MMCoreCSPINVOKE.CMMCore_getAPIVersionInfo(swigCPtr);
    return ret;
  }

  public Configuration getSystemState() {
    Configuration ret = new Configuration(MMCoreCSPINVOKE.CMMCore_getSystemState(swigCPtr), true);
    return ret;
  }

  public Configuration getSystemStateCache() {
    Configuration ret = new Configuration(MMCoreCSPINVOKE.CMMCore_getSystemStateCache(swigCPtr), true);
    return ret;
  }

  public void updateSystemStateCache() {
    MMCoreCSPINVOKE.CMMCore_updateSystemStateCache(swigCPtr);
  }

  public void setSystemState(Configuration conf) {
    MMCoreCSPINVOKE.CMMCore_setSystemState(swigCPtr, Configuration.getCPtr(conf));
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public Configuration getConfigState(string group, string config) {
    Configuration ret = new Configuration(MMCoreCSPINVOKE.CMMCore_getConfigState(swigCPtr, group, config), true);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Configuration getConfigGroupState(string group) {
    Configuration ret = new Configuration(MMCoreCSPINVOKE.CMMCore_getConfigGroupState(swigCPtr, group), true);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void saveSystemState(string fileName) {
    MMCoreCSPINVOKE.CMMCore_saveSystemState(swigCPtr, fileName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void loadSystemState(string fileName) {
    MMCoreCSPINVOKE.CMMCore_loadSystemState(swigCPtr, fileName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void saveSystemConfiguration(string fileName) {
    MMCoreCSPINVOKE.CMMCore_saveSystemConfiguration(swigCPtr, fileName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void loadSystemConfiguration(string fileName) {
    MMCoreCSPINVOKE.CMMCore_loadSystemConfiguration(swigCPtr, fileName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void registerCallback(MMEventCallback cb) {
    MMCoreCSPINVOKE.CMMCore_registerCallback(swigCPtr, MMEventCallback.getCPtr(cb));
  }

  public StrVector getAvailableDevices(string library) {
    StrVector ret = new StrVector(MMCoreCSPINVOKE.CMMCore_getAvailableDevices(swigCPtr, library), true);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StrVector getAvailableDeviceDescriptions(string library) {
    StrVector ret = new StrVector(MMCoreCSPINVOKE.CMMCore_getAvailableDeviceDescriptions(swigCPtr, library), true);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public LongVector getAvailableDeviceTypes(string library) {
    LongVector ret = new LongVector(MMCoreCSPINVOKE.CMMCore_getAvailableDeviceTypes(swigCPtr, library), true);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StrVector getDeviceLibraries(string path) {
    StrVector ret = new StrVector(MMCoreCSPINVOKE.CMMCore_getDeviceLibraries(swigCPtr, path), true);
    return ret;
  }

  public StrVector getLoadedDevices() {
    StrVector ret = new StrVector(MMCoreCSPINVOKE.CMMCore_getLoadedDevices(swigCPtr), true);
    return ret;
  }

  public StrVector getLoadedDevicesOfType(DeviceType devType) {
    StrVector ret = new StrVector(MMCoreCSPINVOKE.CMMCore_getLoadedDevicesOfType(swigCPtr, (int)devType), true);
    return ret;
  }

  public StrVector getDevicePropertyNames(string label) {
    StrVector ret = new StrVector(MMCoreCSPINVOKE.CMMCore_getDevicePropertyNames(swigCPtr, label), true);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getProperty(string label, string propName) {
    string ret = MMCoreCSPINVOKE.CMMCore_getProperty(swigCPtr, label, propName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setProperty(string label, string propName, string propValue) {
    MMCoreCSPINVOKE.CMMCore_setProperty(swigCPtr, label, propName, propValue);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasProperty(string label, string propName) {
    bool ret = MMCoreCSPINVOKE.CMMCore_hasProperty(swigCPtr, label, propName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StrVector getAllowedPropertyValues(string label, string propName) {
    StrVector ret = new StrVector(MMCoreCSPINVOKE.CMMCore_getAllowedPropertyValues(swigCPtr, label, propName), true);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isPropertyReadOnly(string label, string propName) {
    bool ret = MMCoreCSPINVOKE.CMMCore_isPropertyReadOnly(swigCPtr, label, propName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isPropertyPreInit(string label, string propName) {
    bool ret = MMCoreCSPINVOKE.CMMCore_isPropertyPreInit(swigCPtr, label, propName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasPropertyLimits(string label, string propName) {
    bool ret = MMCoreCSPINVOKE.CMMCore_hasPropertyLimits(swigCPtr, label, propName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getPropertyLowerLimit(string label, string propName) {
    double ret = MMCoreCSPINVOKE.CMMCore_getPropertyLowerLimit(swigCPtr, label, propName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getPropertyUpperLimit(string label, string propName) {
    double ret = MMCoreCSPINVOKE.CMMCore_getPropertyUpperLimit(swigCPtr, label, propName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PropertyType getPropertyType(string label, string propName) {
    PropertyType ret = (PropertyType)MMCoreCSPINVOKE.CMMCore_getPropertyType(swigCPtr, label, propName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DeviceType getDeviceType(string label) {
    DeviceType ret = (DeviceType)MMCoreCSPINVOKE.CMMCore_getDeviceType(swigCPtr, label);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool deviceBusy(string deviceName) {
    bool ret = MMCoreCSPINVOKE.CMMCore_deviceBusy(swigCPtr, deviceName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void waitForDevice(string deviceName) {
    MMCoreCSPINVOKE.CMMCore_waitForDevice(swigCPtr, deviceName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void waitForConfig(string group, string configName) {
    MMCoreCSPINVOKE.CMMCore_waitForConfig(swigCPtr, group, configName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool systemBusy() {
    bool ret = MMCoreCSPINVOKE.CMMCore_systemBusy(swigCPtr);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void waitForSystem() {
    MMCoreCSPINVOKE.CMMCore_waitForSystem(swigCPtr);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void waitForImageSynchro() {
    MMCoreCSPINVOKE.CMMCore_waitForImageSynchro(swigCPtr);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool deviceTypeBusy(DeviceType devType) {
    bool ret = MMCoreCSPINVOKE.CMMCore_deviceTypeBusy(swigCPtr, (int)devType);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void waitForDeviceType(DeviceType devType) {
    MMCoreCSPINVOKE.CMMCore_waitForDeviceType(swigCPtr, (int)devType);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void sleep(double intervalMs) {
    MMCoreCSPINVOKE.CMMCore_sleep(swigCPtr, intervalMs);
  }

  public double getDeviceDelayMs(string label) {
    double ret = MMCoreCSPINVOKE.CMMCore_getDeviceDelayMs(swigCPtr, label);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDeviceDelayMs(string label, double delayMs) {
    MMCoreCSPINVOKE.CMMCore_setDeviceDelayMs(swigCPtr, label, delayMs);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTimeoutMs(int timeoutMs) {
    MMCoreCSPINVOKE.CMMCore_setTimeoutMs(swigCPtr, timeoutMs);
  }

  public int getTimeoutMs() {
    int ret = MMCoreCSPINVOKE.CMMCore_getTimeoutMs(swigCPtr);
    return ret;
  }

  public bool usesDeviceDelay(string label) {
    bool ret = MMCoreCSPINVOKE.CMMCore_usesDeviceDelay(swigCPtr, label);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getCoreErrorText(int code) {
    string ret = MMCoreCSPINVOKE.CMMCore_getCoreErrorText(swigCPtr, code);
    return ret;
  }

  public string getCameraDevice() {
    string ret = MMCoreCSPINVOKE.CMMCore_getCameraDevice(swigCPtr);
    return ret;
  }

  public string getShutterDevice() {
    string ret = MMCoreCSPINVOKE.CMMCore_getShutterDevice(swigCPtr);
    return ret;
  }

  public string getFocusDevice() {
    string ret = MMCoreCSPINVOKE.CMMCore_getFocusDevice(swigCPtr);
    return ret;
  }

  public string getXYStageDevice() {
    string ret = MMCoreCSPINVOKE.CMMCore_getXYStageDevice(swigCPtr);
    return ret;
  }

  public string getAutoFocusDevice() {
    string ret = MMCoreCSPINVOKE.CMMCore_getAutoFocusDevice(swigCPtr);
    return ret;
  }

  public string getImageProcessorDevice() {
    string ret = MMCoreCSPINVOKE.CMMCore_getImageProcessorDevice(swigCPtr);
    return ret;
  }

  public string getSLMDevice() {
    string ret = MMCoreCSPINVOKE.CMMCore_getSLMDevice(swigCPtr);
    return ret;
  }

  public string getChannelGroup() {
    string ret = MMCoreCSPINVOKE.CMMCore_getChannelGroup(swigCPtr);
    return ret;
  }

  public void setCameraDevice(string cameraLabel) {
    MMCoreCSPINVOKE.CMMCore_setCameraDevice(swigCPtr, cameraLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShutterDevice(string shutterLabel) {
    MMCoreCSPINVOKE.CMMCore_setShutterDevice(swigCPtr, shutterLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFocusDevice(string focusLabel) {
    MMCoreCSPINVOKE.CMMCore_setFocusDevice(swigCPtr, focusLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setXYStageDevice(string xyStageLabel) {
    MMCoreCSPINVOKE.CMMCore_setXYStageDevice(swigCPtr, xyStageLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAutoFocusDevice(string focusLabel) {
    MMCoreCSPINVOKE.CMMCore_setAutoFocusDevice(swigCPtr, focusLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setImageProcessorDevice(string procLabel) {
    MMCoreCSPINVOKE.CMMCore_setImageProcessorDevice(swigCPtr, procLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSLMDevice(string slmLabel) {
    MMCoreCSPINVOKE.CMMCore_setSLMDevice(swigCPtr, slmLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setChannelGroup(string channelGroup) {
    MMCoreCSPINVOKE.CMMCore_setChannelGroup(swigCPtr, channelGroup);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void defineConfig(string groupName, string configName) {
    MMCoreCSPINVOKE.CMMCore_defineConfig__SWIG_0(swigCPtr, groupName, configName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void defineConfig(string groupName, string configName, string deviceName, string propName, string value) {
    MMCoreCSPINVOKE.CMMCore_defineConfig__SWIG_1(swigCPtr, groupName, configName, deviceName, propName, value);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void defineConfigGroup(string groupName) {
    MMCoreCSPINVOKE.CMMCore_defineConfigGroup(swigCPtr, groupName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void deleteConfigGroup(string groupName) {
    MMCoreCSPINVOKE.CMMCore_deleteConfigGroup(swigCPtr, groupName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void renameConfigGroup(string oldGroupName, string newGroupName) {
    MMCoreCSPINVOKE.CMMCore_renameConfigGroup(swigCPtr, oldGroupName, newGroupName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isGroupDefined(string groupName) {
    bool ret = MMCoreCSPINVOKE.CMMCore_isGroupDefined(swigCPtr, groupName);
    return ret;
  }

  public bool isConfigDefined(string groupName, string configName) {
    bool ret = MMCoreCSPINVOKE.CMMCore_isConfigDefined(swigCPtr, groupName, configName);
    return ret;
  }

  public void setConfig(string groupName, string configName) {
    MMCoreCSPINVOKE.CMMCore_setConfig(swigCPtr, groupName, configName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void deleteConfig(string groupName, string configName) {
    MMCoreCSPINVOKE.CMMCore_deleteConfig__SWIG_0(swigCPtr, groupName, configName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void deleteConfig(string groupName, string configName, string deviceLabel, string propName) {
    MMCoreCSPINVOKE.CMMCore_deleteConfig__SWIG_1(swigCPtr, groupName, configName, deviceLabel, propName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void renameConfig(string groupName, string oldConfigName, string newConfigName) {
    MMCoreCSPINVOKE.CMMCore_renameConfig(swigCPtr, groupName, oldConfigName, newConfigName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public StrVector getAvailableConfigGroups() {
    StrVector ret = new StrVector(MMCoreCSPINVOKE.CMMCore_getAvailableConfigGroups(swigCPtr), true);
    return ret;
  }

  public StrVector getAvailableConfigs(string configGroup) {
    StrVector ret = new StrVector(MMCoreCSPINVOKE.CMMCore_getAvailableConfigs(swigCPtr, configGroup), true);
    return ret;
  }

  public string getCurrentConfig(string groupName) {
    string ret = MMCoreCSPINVOKE.CMMCore_getCurrentConfig(swigCPtr, groupName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Configuration getConfigData(string configGroup, string configName) {
    Configuration ret = new Configuration(MMCoreCSPINVOKE.CMMCore_getConfigData(swigCPtr, configGroup, configName), true);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getCurrentPixelSizeConfig() {
    string ret = MMCoreCSPINVOKE.CMMCore_getCurrentPixelSizeConfig(swigCPtr);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getPixelSizeUm() {
    double ret = MMCoreCSPINVOKE.CMMCore_getPixelSizeUm(swigCPtr);
    return ret;
  }

  public double getPixelSizeUmByID(string resolutionID) {
    double ret = MMCoreCSPINVOKE.CMMCore_getPixelSizeUmByID(swigCPtr, resolutionID);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getMagnificationFactor() {
    double ret = MMCoreCSPINVOKE.CMMCore_getMagnificationFactor(swigCPtr);
    return ret;
  }

  public void setPixelSizeUm(string resolutionID, double pixSize) {
    MMCoreCSPINVOKE.CMMCore_setPixelSizeUm(swigCPtr, resolutionID, pixSize);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void definePixelSizeConfig(string resolutionID, string deviceName, string propName, string value) {
    MMCoreCSPINVOKE.CMMCore_definePixelSizeConfig__SWIG_0(swigCPtr, resolutionID, deviceName, propName, value);
  }

  public void definePixelSizeConfig(string resolutionID) {
    MMCoreCSPINVOKE.CMMCore_definePixelSizeConfig__SWIG_1(swigCPtr, resolutionID);
  }

  public StrVector getAvailablePixelSizeConfigs() {
    StrVector ret = new StrVector(MMCoreCSPINVOKE.CMMCore_getAvailablePixelSizeConfigs(swigCPtr), true);
    return ret;
  }

  public bool isPixelSizeConfigDefined(string resolutionID) {
    bool ret = MMCoreCSPINVOKE.CMMCore_isPixelSizeConfigDefined(swigCPtr, resolutionID);
    return ret;
  }

  public void setPixelSizeConfig(string resolutionID) {
    MMCoreCSPINVOKE.CMMCore_setPixelSizeConfig(swigCPtr, resolutionID);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void renamePixelSizeConfig(string oldConfigName, string newConfigName) {
    MMCoreCSPINVOKE.CMMCore_renamePixelSizeConfig(swigCPtr, oldConfigName, newConfigName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void deletePixelSizeConfig(string configName) {
    MMCoreCSPINVOKE.CMMCore_deletePixelSizeConfig(swigCPtr, configName);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public Configuration getPixelSizeConfigData(string configName) {
    Configuration ret = new Configuration(MMCoreCSPINVOKE.CMMCore_getPixelSizeConfigData(swigCPtr, configName), true);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setROI(int x, int y, int xSize, int ySize) {
    MMCoreCSPINVOKE.CMMCore_setROI(swigCPtr, x, y, xSize, ySize);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getROI(out int x, out int y, out int xSize, out int ySize) {
    MMCoreCSPINVOKE.CMMCore_getROI(swigCPtr, out x, out y, out xSize, out ySize);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearROI() {
    MMCoreCSPINVOKE.CMMCore_clearROI(swigCPtr);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setExposure(double exp) {
    MMCoreCSPINVOKE.CMMCore_setExposure(swigCPtr, exp);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public double getExposure() {
    double ret = MMCoreCSPINVOKE.CMMCore_getExposure(swigCPtr);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CoreDevices.CoreImage getImage() {
	
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return (new CoreDevices.CoreImage( new  cImage( MMCoreCSPINVOKE.CMMCore_getImage(swigCPtr),true))  );
}

  public CoreDevices.CoreImage getRGB32Image() {
	
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return (new CoreDevices.CoreImage( new  cImage( MMCoreCSPINVOKE.CMMCore_getRGB32Image(swigCPtr),true))  );
}

  public void snapImage() {
    MMCoreCSPINVOKE.CMMCore_snapImage(swigCPtr);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getImageWidth() {
    uint ret = MMCoreCSPINVOKE.CMMCore_getImageWidth(swigCPtr);
    return ret;
  }

  public uint getImageHeight() {
    uint ret = MMCoreCSPINVOKE.CMMCore_getImageHeight(swigCPtr);
    return ret;
  }

  public uint getBytesPerPixel() {
    uint ret = MMCoreCSPINVOKE.CMMCore_getBytesPerPixel(swigCPtr);
    return ret;
  }

  public uint getImageBitDepth() {
    uint ret = MMCoreCSPINVOKE.CMMCore_getImageBitDepth(swigCPtr);
    return ret;
  }

  public uint getNumberOfComponents() {
    uint ret = MMCoreCSPINVOKE.CMMCore_getNumberOfComponents(swigCPtr);
    return ret;
  }

  public StrVector getChannelNames() {
    StrVector ret = new StrVector(MMCoreCSPINVOKE.CMMCore_getChannelNames(swigCPtr), true);
    return ret;
  }

  public int getImageBufferSize() {
    int ret = MMCoreCSPINVOKE.CMMCore_getImageBufferSize(swigCPtr);
    return ret;
  }

  public void assignImageSynchro(string deviceLabel) {
    MMCoreCSPINVOKE.CMMCore_assignImageSynchro(swigCPtr, deviceLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeImageSynchro(string label) {
    MMCoreCSPINVOKE.CMMCore_removeImageSynchro(swigCPtr, label);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeImageSynchroAll() {
    MMCoreCSPINVOKE.CMMCore_removeImageSynchroAll(swigCPtr);
  }

  public void setAutoShutter(bool state) {
    MMCoreCSPINVOKE.CMMCore_setAutoShutter(swigCPtr, state);
  }

  public bool getAutoShutter() {
    bool ret = MMCoreCSPINVOKE.CMMCore_getAutoShutter(swigCPtr);
    return ret;
  }

  public void setShutterOpen(bool state) {
    MMCoreCSPINVOKE.CMMCore_setShutterOpen(swigCPtr, state);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getShutterOpen() {
    bool ret = MMCoreCSPINVOKE.CMMCore_getShutterOpen(swigCPtr);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void startSequenceAcquisition(int numImages, double intervalMs, bool stopOnOverflow) {
    MMCoreCSPINVOKE.CMMCore_startSequenceAcquisition__SWIG_0(swigCPtr, numImages, intervalMs, stopOnOverflow);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void startSequenceAcquisition(string cameraLabel, int numImages, double intervalMs, bool stopOnOverflow) {
    MMCoreCSPINVOKE.CMMCore_startSequenceAcquisition__SWIG_1(swigCPtr, cameraLabel, numImages, intervalMs, stopOnOverflow);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void prepareSequenceAcquisition(string cameraLabel) {
    MMCoreCSPINVOKE.CMMCore_prepareSequenceAcquisition(swigCPtr, cameraLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void startContinuousSequenceAcquisition(double intervalMs) {
    MMCoreCSPINVOKE.CMMCore_startContinuousSequenceAcquisition(swigCPtr, intervalMs);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void stopSequenceAcquisition() {
    MMCoreCSPINVOKE.CMMCore_stopSequenceAcquisition__SWIG_0(swigCPtr);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void stopSequenceAcquisition(string label) {
    MMCoreCSPINVOKE.CMMCore_stopSequenceAcquisition__SWIG_1(swigCPtr, label);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isSequenceRunning() {
    bool ret = MMCoreCSPINVOKE.CMMCore_isSequenceRunning__SWIG_0(swigCPtr);
    return ret;
  }

  public bool isSequenceRunning(string label) {
    bool ret = MMCoreCSPINVOKE.CMMCore_isSequenceRunning__SWIG_1(swigCPtr, label);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CoreDevices.CoreImage getLastImage() {
	
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return (new CoreDevices.CoreImage( new  cImage( MMCoreCSPINVOKE.CMMCore_getLastImage(swigCPtr),true))  );
}

  public CoreDevices.CoreImage popNextImage() {
	
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return (new CoreDevices.CoreImage( new  cImage( MMCoreCSPINVOKE.CMMCore_popNextImage(swigCPtr),true))  );
}

  public CoreDevices.CoreImage getLastImageMD(uint channel, uint slice, Metadata md) {
	
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return (new CoreDevices.CoreImage( new  cImage( MMCoreCSPINVOKE.CMMCore_getLastImageMD(swigCPtr, channel, slice, Metadata.getCPtr(md)),true))  );
}

  public CoreDevices.CoreImage popNextImageMD(uint channel, uint slice, Metadata md) {
	
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return (new CoreDevices.CoreImage( new  cImage( MMCoreCSPINVOKE.CMMCore_popNextImageMD(swigCPtr, channel, slice, Metadata.getCPtr(md)),true))  );
}

  public int getRemainingImageCount() {
    int ret = MMCoreCSPINVOKE.CMMCore_getRemainingImageCount(swigCPtr);
    return ret;
  }

  public int getBufferTotalCapacity() {
    int ret = MMCoreCSPINVOKE.CMMCore_getBufferTotalCapacity(swigCPtr);
    return ret;
  }

  public int getBufferFreeCapacity() {
    int ret = MMCoreCSPINVOKE.CMMCore_getBufferFreeCapacity(swigCPtr);
    return ret;
  }

  public double getBufferIntervalMs() {
    double ret = MMCoreCSPINVOKE.CMMCore_getBufferIntervalMs(swigCPtr);
    return ret;
  }

  public bool isBufferOverflowed() {
    bool ret = MMCoreCSPINVOKE.CMMCore_isBufferOverflowed(swigCPtr);
    return ret;
  }

  public void setCircularBufferMemoryFootprint(uint sizeMB) {
    MMCoreCSPINVOKE.CMMCore_setCircularBufferMemoryFootprint(swigCPtr, sizeMB);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void intializeCircularBuffer() {
    MMCoreCSPINVOKE.CMMCore_intializeCircularBuffer(swigCPtr);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public double getLastFocusScore() {
    double ret = MMCoreCSPINVOKE.CMMCore_getLastFocusScore(swigCPtr);
    return ret;
  }

  public double getCurrentFocusScore() {
    double ret = MMCoreCSPINVOKE.CMMCore_getCurrentFocusScore(swigCPtr);
    return ret;
  }

  public void enableContinuousFocus(bool enable) {
    MMCoreCSPINVOKE.CMMCore_enableContinuousFocus(swigCPtr, enable);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isContinuousFocusEnabled() {
    bool ret = MMCoreCSPINVOKE.CMMCore_isContinuousFocusEnabled(swigCPtr);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isContinuousFocusLocked() {
    bool ret = MMCoreCSPINVOKE.CMMCore_isContinuousFocusLocked(swigCPtr);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void fullFocus() {
    MMCoreCSPINVOKE.CMMCore_fullFocus(swigCPtr);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void incrementalFocus() {
    MMCoreCSPINVOKE.CMMCore_incrementalFocus(swigCPtr);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAutoFocusOffset(double offset) {
    MMCoreCSPINVOKE.CMMCore_setAutoFocusOffset(swigCPtr, offset);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public double getAutoFocusOffset() {
    double ret = MMCoreCSPINVOKE.CMMCore_getAutoFocusOffset(swigCPtr);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setState(string deviceLabel, int state) {
    MMCoreCSPINVOKE.CMMCore_setState(swigCPtr, deviceLabel, state);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getState(string deviceLabel) {
    int ret = MMCoreCSPINVOKE.CMMCore_getState(swigCPtr, deviceLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getNumberOfStates(string deviceLabel) {
    int ret = MMCoreCSPINVOKE.CMMCore_getNumberOfStates(swigCPtr, deviceLabel);
    return ret;
  }

  public void setStateLabel(string deviceLabel, string stateLabel) {
    MMCoreCSPINVOKE.CMMCore_setStateLabel(swigCPtr, deviceLabel, stateLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getStateLabel(string deviceLabel) {
    string ret = MMCoreCSPINVOKE.CMMCore_getStateLabel(swigCPtr, deviceLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void defineStateLabel(string deviceLabel, int state, string stateLabel) {
    MMCoreCSPINVOKE.CMMCore_defineStateLabel(swigCPtr, deviceLabel, state, stateLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public StrVector getStateLabels(string deviceLabel) {
    StrVector ret = new StrVector(MMCoreCSPINVOKE.CMMCore_getStateLabels(swigCPtr, deviceLabel), true);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getStateFromLabel(string deviceLabel, string stateLabel) {
    int ret = MMCoreCSPINVOKE.CMMCore_getStateFromLabel(swigCPtr, deviceLabel, stateLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PropertyBlock getStateLabelData(string deviceLabel, string stateLabel) {
    PropertyBlock ret = new PropertyBlock(MMCoreCSPINVOKE.CMMCore_getStateLabelData(swigCPtr, deviceLabel, stateLabel), true);
    return ret;
  }

  public PropertyBlock getData(string deviceLabel) {
    PropertyBlock ret = new PropertyBlock(MMCoreCSPINVOKE.CMMCore_getData(swigCPtr, deviceLabel), true);
    return ret;
  }

  public void definePropertyBlock(string blockName, string propertyName, string propertyValue) {
    MMCoreCSPINVOKE.CMMCore_definePropertyBlock(swigCPtr, blockName, propertyName, propertyValue);
  }

  public StrVector getAvailablePropertyBlocks() {
    StrVector ret = new StrVector(MMCoreCSPINVOKE.CMMCore_getAvailablePropertyBlocks(swigCPtr), true);
    return ret;
  }

  public PropertyBlock getPropertyBlockData(string blockName) {
    PropertyBlock ret = new PropertyBlock(MMCoreCSPINVOKE.CMMCore_getPropertyBlockData(swigCPtr, blockName), true);
    return ret;
  }

  public void setPosition(string deviceLabel, double position) {
    MMCoreCSPINVOKE.CMMCore_setPosition(swigCPtr, deviceLabel, position);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public double getPosition(string deviceLabel) {
    double ret = MMCoreCSPINVOKE.CMMCore_getPosition(swigCPtr, deviceLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setRelativePosition(string deviceLabel, double d) {
    MMCoreCSPINVOKE.CMMCore_setRelativePosition(swigCPtr, deviceLabel, d);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setXYPosition(string deviceLabel, double x, double y) {
    MMCoreCSPINVOKE.CMMCore_setXYPosition(swigCPtr, deviceLabel, x, y);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setRelativeXYPosition(string deviceLabel, double dx, double dy) {
    MMCoreCSPINVOKE.CMMCore_setRelativeXYPosition(swigCPtr, deviceLabel, dx, dy);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getXYPosition(string deviceLabel, out double x, out double y) {
    MMCoreCSPINVOKE.CMMCore_getXYPosition(swigCPtr, deviceLabel, out x, out y);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public double getXPosition(string deviceLabel) {
    double ret = MMCoreCSPINVOKE.CMMCore_getXPosition(swigCPtr, deviceLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getYPosition(string deviceLabel) {
    double ret = MMCoreCSPINVOKE.CMMCore_getYPosition(swigCPtr, deviceLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void stop(string deviceLabel) {
    MMCoreCSPINVOKE.CMMCore_stop(swigCPtr, deviceLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void home(string deviceLabel) {
    MMCoreCSPINVOKE.CMMCore_home(swigCPtr, deviceLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setOriginXY(string deviceLabel) {
    MMCoreCSPINVOKE.CMMCore_setOriginXY(swigCPtr, deviceLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAdapterOriginXY(string deviceName, double x, double y) {
    MMCoreCSPINVOKE.CMMCore_setAdapterOriginXY(swigCPtr, deviceName, x, y);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetStageLimits(string deviceName, SWIGTYPE_p_double lower, SWIGTYPE_p_double upper) {
    MMCoreCSPINVOKE.CMMCore_GetStageLimits(swigCPtr, deviceName, SWIGTYPE_p_double.getCPtr(lower), SWIGTYPE_p_double.getCPtr(upper));
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSerialPortCommand(string deviceLabel, string command, string term) {
    MMCoreCSPINVOKE.CMMCore_setSerialPortCommand(swigCPtr, deviceLabel, command, term);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getSerialPortAnswer(string deviceLabel, string term) {
    string ret = MMCoreCSPINVOKE.CMMCore_getSerialPortAnswer(swigCPtr, deviceLabel, term);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void writeToSerialPort(string deviceLabel, CharVector data) {
    MMCoreCSPINVOKE.CMMCore_writeToSerialPort(swigCPtr, deviceLabel, CharVector.getCPtr(data));
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public CharVector readFromSerialPort(string deviceLabel) {
    CharVector ret = new CharVector(MMCoreCSPINVOKE.CMMCore_readFromSerialPort(swigCPtr, deviceLabel), true);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSLMImage(string deviceLabel, byte[] pixels) {
    MMCoreCSPINVOKE.CMMCore_setSLMImage__SWIG_0(swigCPtr, deviceLabel, pixels);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSLMImage(string deviceLabel, uint[] pixels) {
    MMCoreCSPINVOKE.CMMCore_setSLMImage__SWIG_1(swigCPtr, deviceLabel, pixels);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSLMPixelsTo(string deviceLabel, byte intensity) {
    MMCoreCSPINVOKE.CMMCore_setSLMPixelsTo__SWIG_0(swigCPtr, deviceLabel, intensity);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSLMPixelsTo(string deviceLabel, byte red, byte green, byte blue) {
    MMCoreCSPINVOKE.CMMCore_setSLMPixelsTo__SWIG_1(swigCPtr, deviceLabel, red, green, blue);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void displaySLMImage(string deviceLabel) {
    MMCoreCSPINVOKE.CMMCore_displaySLMImage(swigCPtr, deviceLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getSLMWidth(string deviceLabel) {
    uint ret = MMCoreCSPINVOKE.CMMCore_getSLMWidth(swigCPtr, deviceLabel);
    return ret;
  }

  public uint getSLMHeight(string deviceLabel) {
    uint ret = MMCoreCSPINVOKE.CMMCore_getSLMHeight(swigCPtr, deviceLabel);
    return ret;
  }

  public uint getSLMNumberOfComponents(string deviceLabel) {
    uint ret = MMCoreCSPINVOKE.CMMCore_getSLMNumberOfComponents(swigCPtr, deviceLabel);
    return ret;
  }

  public uint getSLMBytesPerPixel(string deviceLabel) {
    uint ret = MMCoreCSPINVOKE.CMMCore_getSLMBytesPerPixel(swigCPtr, deviceLabel);
    return ret;
  }

  public double SetSignalIOValue(double value, string deviceLabel) {
    double ret = MMCoreCSPINVOKE.CMMCore_SetSignalIOValue__SWIG_0(swigCPtr, value, deviceLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double SetSignalIOValue(double[] SignalValue, int length, string deviceLabel) {
    double ret = MMCoreCSPINVOKE.CMMCore_SetSignalIOValue__SWIG_1(swigCPtr, SignalValue, length, deviceLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double SetSignalIOValue(string filename, string deviceLabel) {
    double ret = MMCoreCSPINVOKE.CMMCore_SetSignalIOValue__SWIG_2(swigCPtr, filename, deviceLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetSignalIOValue(string deviceLabel) {
    double ret = MMCoreCSPINVOKE.CMMCore_GetSignalIOValue(swigCPtr, deviceLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetSignalIOValues(string deviceLabel, double[] SignalValues) {
    MMCoreCSPINVOKE.CMMCore_GetSignalIOValues(swigCPtr, deviceLabel, SignalValues);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetSignalUpperLimit(string deviceLabel) {
    double ret = MMCoreCSPINVOKE.CMMCore_GetSignalUpperLimit(swigCPtr, deviceLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetSignalLowerLimit(string deviceLabel) {
    double ret = MMCoreCSPINVOKE.CMMCore_GetSignalLowerLimit(swigCPtr, deviceLabel);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
