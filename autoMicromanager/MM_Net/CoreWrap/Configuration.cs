/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace CWrapper {

using System;
using System.Runtime.InteropServices;

public class Configuration : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Configuration(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Configuration obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Configuration() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MMCoreCSPINVOKE.delete_Configuration(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Configuration() : this(MMCoreCSPINVOKE.new_Configuration(), true) {
  }

  public void addSetting(PropertySetting setting) {
    MMCoreCSPINVOKE.Configuration_addSetting(swigCPtr, PropertySetting.getCPtr(setting));
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void deleteSetting(string device, string prop) {
    MMCoreCSPINVOKE.Configuration_deleteSetting(swigCPtr, device, prop);
  }

  public bool isPropertyIncluded(string device, string property) {
    bool ret = MMCoreCSPINVOKE.Configuration_isPropertyIncluded(swigCPtr, device, property);
    return ret;
  }

  public bool isSettingIncluded(PropertySetting ps) {
    bool ret = MMCoreCSPINVOKE.Configuration_isSettingIncluded(swigCPtr, PropertySetting.getCPtr(ps));
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isConfigurationIncluded(Configuration cfg) {
    bool ret = MMCoreCSPINVOKE.Configuration_isConfigurationIncluded(swigCPtr, Configuration.getCPtr(cfg));
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PropertySetting getSetting(uint index) {
    PropertySetting ret = new PropertySetting(MMCoreCSPINVOKE.Configuration_getSetting__SWIG_0(swigCPtr, index), true);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PropertySetting getSetting(string device, string prop) {
    PropertySetting ret = new PropertySetting(MMCoreCSPINVOKE.Configuration_getSetting__SWIG_1(swigCPtr, device, prop), true);
    return ret;
  }

  public uint size() {
    uint ret = MMCoreCSPINVOKE.Configuration_size(swigCPtr);
    return ret;
  }

  public string getVerbose() {
    string ret = MMCoreCSPINVOKE.Configuration_getVerbose(swigCPtr);
    return ret;
  }

  public string Serialize() {
    string ret = MMCoreCSPINVOKE.Configuration_Serialize(swigCPtr);
    return ret;
  }

  public void Restore(string data) {
    MMCoreCSPINVOKE.Configuration_Restore(swigCPtr, data);
    if (MMCoreCSPINVOKE.SWIGPendingException.Pending) throw MMCoreCSPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
