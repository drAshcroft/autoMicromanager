using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.InteropServices;
using CWrapper;

namespace CoreDevices.Interfaces
{
    [Guid("5A88092E-69DF-0001-AD88-8FA83E550F20")]
    [InterfaceType(ComInterfaceType.InterfaceIsDual)]
    public interface IComCMMCore
    {
         void assignImageSynchro(string deviceLabel);
         void clearLog();
         void clearROI();
         void defineConfig(string groupName, string configName, string deviceName, string propName, string value);
         void defineConfigGroup(string groupName);
         void definePixelSizeConfig(string resolutionID, string deviceName, string propName, string value);
         void definePropertyBlock(string blockName, string propertyName, string propertyValue);
         void defineStateLabel(string deviceLabel, int state, string stateLabel);
         void deleteConfig(string groupName, string configName);
         void deleteConfigGroup(string groupName);
         void deletePixelSizeConfig(string configName);
         bool deviceBusy(string deviceName);
         bool deviceTypeBusy(DeviceType devType);
        
         void enableContinuousFocus(bool enable);
         void enableDebugLog(bool enable);
         void enableStderrLog(bool enable);
         void fullFocus();
         StrVector getAllowedPropertyValues(string label, string propName);
         string getAPIVersionInfo();
         string getAutoFocusDevice();
         bool getAutoShutter();
         StrVector getAvailableConfigGroups();
         StrVector getAvailableConfigs(string configGroup);
         StrVector getAvailableDeviceDescriptions(string library);
         StrVector getAvailableDevices(string library);
         IntVector getAvailableDeviceTypes(string library);
         StrVector getAvailablePixelSizeConfigs();
         StrVector getAvailablePropertyBlocks();
         int getBufferFreeCapacity();
         double getBufferIntervalMs();
         int getBufferTotalCapacity();
         uint getBytesPerPixel();
         string getCameraDevice();
         StrVector getChannelNames();
         Configuration getConfigData(string configGroup, string configName);
         Configuration getConfigGroupState(string group);
         Configuration getConfigState(string group, string config);
         string getCoreErrorText(int code);
         string getCurrentConfig(string groupName);
         PropertyBlock getData(string deviceLabel);
         double getDeviceDelayMs(string label);
         StrVector getDeviceLibraries(string path);
         StrVector getDevicePropertyNames(string label);
         DeviceType getDeviceType(string label);
         double getExposure();
         string getFocusDevice();
         double getFocusScore();
         string getHostName();
         CoreImage getImage();
         uint getImageBitDepth();
         int getImageBufferSize();
         uint getImageHeight();
         CoreImage getImageMD(int handle, uint channel, uint slice);
         Metadata getImageMetadata(int handle, uint channel, uint slice);
         string getImageProcessorDevice();
         uint getImageWidth();
         CoreImage getLastImage();
         CoreImage getLastImageMD(uint channel, uint slice, Metadata md);
         StrVector getLoadedDevices();
         StrVector getLoadedDevicesOfType(DeviceType devType);
         double getMagnificationFactor();
         uint getNumberOfChannels();
         int getNumberOfStates(string deviceLabel);
         Configuration getPixelSizeConfigData(string configName);
         double getPixelSizeUm();
         double getPixelSizeUm(string resolutionID);
         double getPosition(string deviceName);
         string getProperty(string label, string propName);
         PropertyBlock getPropertyBlockData(string blockName);
         double getPropertyLowerLimit(string label, string propName);
         PropertyType getPropertyType(string label, string propName);
         double getPropertyUpperLimit(string label, string propName);
         int getRemainingImageCount();
         
         void getROI(out int x, out int y, out int xSize, out int ySize);
         string getSerialPortAnswer(string name, string term);
         string getShutterDevice();
         bool getShutterOpen();
         double GetSignalIOValue(string deviceLabel);
         double GetSignalLowerLimit(string deviceLabel);
         double GetSignalUpperLimit(string deviceLabel);
         double getStageLowerLimit(string label);
         double getStageStepSize(string label);
         double getStageUpperLimit(string label);
         int getState(string deviceLabel);
         int getStateFromLabel(string deviceLabel, string stateLabel);
         string getStateLabel(string deviceLabel);
         PropertyBlock getStateLabelData(string deviceLabel, string stateLabel);
         StrVector getStateLabels(string deviceLabel);
         Configuration getSystemState();
         Configuration getSystemStateCache();
         int getTimeoutMs();
         string getUserId();
         string getVersionInfo();
         double getXPosition(string deviceName);
         void getXYPosition(string deviceName, out double x, out double y);
         string getXYStageDevice();
         double getYPosition(string deviceName);
         bool hasProperty(string label, string propName);
         bool hasPropertyLimits(string label, string propName);
         void home(string deviceName);
         void incrementalFocus();
         void initializeAllDevices();
         void initializeDevice(string label);
         void initializeLogging();
         bool isBufferOverflowed();
         bool isConfigDefined(string groupName, string configName);
         bool isContinuousFocusEnabled();
         bool isContinuousFocusLocked();
         bool isGroupDefined(string groupName);
         bool isPixelSizeConfigDefined(string resolutionID);
         bool isPropertyPreInit(string label, string propName);
         bool isPropertyReadOnly(string label, string propName);
         void loadDevice(string label, string library, string name);
         void loadSystemConfiguration(string fileName);
         void loadSystemState(string fileName);
         void logMessage(string msg);
         CoreImage popNextImage();
         CoreImage popNextImageMD(uint channel, uint slice, Metadata md);
         CharVector readFromSerialPort(string name);
         void registerCallback(MMEventCallback cb);
         void removeImageSynchro(string label);
         void removeImageSynchroAll();
         void reset();
         void saveSystemConfiguration(string fileName);
         void saveSystemState(string fileName);
         void setAutoFocusDevice(string focusLabel);
         void setAutoShutter(bool state);
         void setCameraDevice(string cameraLabel);
         void setCircularBufferMemoryFootprint(uint sizeMB);
         void setConfig(string groupName, string configName);
         void setDeviceDelayMs(string label, double delayMs);
         void setExposure(double exp);
         void setFocusDevice(string focusLabel);
         void setImageProcessorDevice(string procLabel);
         void setOriginXY(string deviceName);
         void setPixelSizeConfig(string resolutionID);
         void setPixelSizeUm(string resolutionID, double pixSize);
         void setPosition(string deviceName, double position);
         void setProperty(string label, string propName, string propValue);
         void setRelativePosition(string deviceName, double d);
         void setRelativeXYPosition(string deviceName, double dx, double dy);
         void setROI(int x, int y, int xSize, int ySize);
         void setSerialPortCommand(string name, string command, string term);
         void setShutterDevice(string shutterLabel);
         void setShutterOpen(bool state);
         double SetSignalIOValue(double value, string deviceLabel);
         double SetSignalIOValue(double[] value, string deviceLabel);
         double SetSignalIOValue(string filename, string deviceLabel);
         void setState(string deviceLabel, int state);
         void setStateLabel(string deviceLabel, string stateLabel);
         void setSystemState(Configuration conf);
         void setTimeoutMs(int timeoutMs);
         void setXYPosition(string deviceName, double x, double y);
         void setXYStageDevice(string xyStageLabel);
         void shutdownLogging();
         void sleep(double intervalMs);
         void snapImage();
         int snapImageMD();
         void startSequenceAcquisition(int numImages, double intervalMs);
         void stop(string deviceName);
         void stopSequenceAcquisition();
         bool systemBusy();
         void unloadAllDevices();
         void updateSystemStateCache();
         bool usesDeviceDelay(string label);
         void waitForConfig(string group, string configName);
         void waitForDevice(string deviceName);
         void waitForDeviceType(DeviceType devType);
         void waitForImageSynchro();
         void waitForSystem();
         void writeToSerialPort(string name, CharVector data);
    }
}
